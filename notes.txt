///////////////////////////
//-To update the next.js version to latest
///////////////////////////
  npm install next@latest react@latest react-dom@latest eslint-config-next@latest

///////////////////////////
//-To see what pages it belongs in vscode
///////////////////////////
    go to settings
    check the controls whether...
    add item
    add to the Item - **/app/**/page.js
    add to the Value - PAGE ${dirname}

///////////////////////////
//-dynamic metadata
///////////////////////////
-%s will be overriden the individual title of each pages

  export const metadata = {
    title: {
      template: "%s | The Wild Oasis",
      default: "Welcome to The Wild Oasis",
    }
  };

///////////////////////////
//-adding fav icon
///////////////////////////
  add icon with any file format ex. png,jpg etc.

///////////////////////////
//-adding google fonts
///////////////////////////
  import { Josefin_Sans } from "next/font/google";
  const josefinSans = Josefin_Sans({
    subsets: ["latin"],
    display: "swap",
  });

  in the html
  className={`${josefinSans.className}`}

///////////////////////////
//-Suspense 
///////////////////////////
- it only Suspense the components that mostly fetching data
  other than the suspense, it will display the other components by default
  while the components inside the suspense will be displayed once promise is fulfilled

<Suspense fallback={<Spinner/>}>
  <Cabinlist />
</Suspense>

///////////////////////////
//error boundery
///////////////////////////
  always a client component and has access to error and reset parameter
  it will not catch an error to any root level error

///////////////////////////
//making route segments rendered as static/prerendered
///////////////////////////
  in the page.js in the route segment ex. (cabins > [cabinId] > page.js)
  declare a async function name generateStaticParams()
  get all the list of cabins
  loop in the cabins and return each cabin inside the array which each object of cabin id on it

  example output:
    [
      { cabinId: '67ceba16981cccd746f5a829' },
      { cabinId: '67cebab7981cccd746f5a82a' },
      { cabinId: '67cebb2d981cccd746f5a82f' },
      { cabinId: '67cebb5a981cccd746f5a830' },
      { cabinId: '67cebb96981cccd746f5a832' },
      { cabinId: '67cebbd7981cccd746f5a834' },
      { cabinId: '67cebbfd981cccd746f5a835' },
      { cabinId: '67cebc1d981cccd746f5a836' }
    ]

  to do that, I've create a service to get all cabins in the data-service.js
  -GET all cabins
  export async function getCabins() {
    await connectDB();
    const cabins = await Cabin.find({}).lean();

    if (!cabins || cabins.length === 0) {
      notFound();
    }

    return cabins;
  }

  and in the route segment generateStaticParams() function
    export async function generateStaticParams() {
      const cabins = await getCabins();

      const ids = cabins.map((cabin) => ({
        cabinId: cabin._id.toString(),
      }));

      return ids;
    }

///////////////////////////
//static site generation
///////////////////////////
before we can implement this, make sure to make all routes static
go to next.config.mjs
it will create a new folder named "out"

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "res.cloudinary.com",
        pathname: "**",
      },
    ],
  },
  output: "export" //add this line
};

export default nextConfig;

///////////////////////////
//caching
///////////////////////////
- in route level
    export const revalidate = 0; // turn off data and full page caching

    -Incremental Static Regeneration (ISR) - the data will be updated after the time duration
    export const revalidate = 0; // just adjust the numbers base on seconds

- in component level
